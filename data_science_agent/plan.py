"""Data models and enumerations for execution plans.

The agent operates by creating a plan of tasks and subtasks that
describe the work required to satisfy a userâ€™s objective. This
module defines the structures used for planning as well as the
corresponding Pydantic models that are used to parse responses
generated by language models into strongly typed objects.
"""

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import List, Any, Optional, Dict

from pydantic import BaseModel, Field


class TaskStatus(Enum):
    """Enum describing execution status of a plan, task or subtask."""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class SubTaskPlan(BaseModel):
    """Structured subtask plan as returned by the LLM."""
    id: str = Field(description="Unique subtask ID")
    name: str = Field(description="Subtask name")
    description: str = Field(description="Detailed description of what to do")
    reasoning: str = Field(description="Why this subtask is needed")
    expected_output: str = Field(description="What output is expected")


class TaskPlan(BaseModel):
    """Structured task plan as returned by the LLM."""
    id: str = Field(description="Unique task ID")
    name: str = Field(description="Task name")
    description: str = Field(description="Task description")
    subtasks: List[SubTaskPlan] = Field(description="List of subtasks")
    reasoning: str = Field(description="Why this task is needed")


class ExecutionPlan(BaseModel):
    """Structured execution plan model returned by the LLM."""
    objective: str = Field(description="Main objective")
    tasks: List[TaskPlan] = Field(description="List of tasks to execute")
    reasoning: str = Field(description="Overall strategy and reasoning")
    success_criteria: str = Field(description="How to measure success")


class CodeGeneration(BaseModel):
    """Structured code generation output used by the agent."""
    code: str = Field(description="Python code to execute")
    explanation: str = Field(description="What the code does")
    expected_output: str = Field(description="What output to expect")
    required_context: List[str] = Field(description="Required variables from context")


@dataclass
class SubTask:
    """Represents a subtask within a task."""

    id: str
    name: str
    description: str
    code: Optional[str] = None
    result: Optional[Any] = None
    status: TaskStatus = TaskStatus.PENDING
    error: Optional[str] = None
    reasoning: Optional[str] = None
    llm_analysis: Optional[str] = None
    created_at: datetime = field(default_factory=datetime.now)
    completed_at: Optional[datetime] = None


@dataclass
class Task:
    """Represents a main task."""

    id: str
    name: str
    description: str
    subtasks: List[SubTask] = field(default_factory=list)
    status: TaskStatus = TaskStatus.PENDING
    result: Optional[Any] = None
    error: Optional[str] = None
    created_at: datetime = field(default_factory=datetime.now)
    completed_at: Optional[datetime] = None


@dataclass
class Plan:
    """Represents an execution plan."""

    id: str
    objective: str
    tasks: List[Task] = field(default_factory=list)
    reasoning: str = ""
    success_criteria: str = ""
    status: TaskStatus = TaskStatus.PENDING
    created_at: datetime = field(default_factory=datetime.now)
    completed_at: Optional[datetime] = None